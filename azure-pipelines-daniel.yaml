# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master
stages:
  - stage: Build
    jobs:
    # download piper and put it into cache
    - job: downloadPiper1
      pool:
        vmImage: 'ubuntu-latest'
      container:
        image: ppiper/cf-cli
        options: -u 0
      steps:
      - checkout: none
      # check cache for piper
      - task: Cache@2
        inputs:
          key: piper-go-official
          path: bin
          cacheHitVar: FOUND_PIPER
        displayName: Cache piper go binary
      # download if piper not in cache
      - script: |
            mkdir -p bin
            curl -L --output bin/piper https://github.com/SAP/jenkins-library/releases/download/v1.73.0/piper
            chmod +x bin/piper
        condition: ne(variables.FOUND_PIPER, 'true')
        displayName: 'Download Piper'
      - script: bin/piper version
        displayName: 'Piper Version'

    # build piper mta and publish artifact
    - job: piperMta
      dependsOn: downloadPiper1
      pool:
        vmImage: 'ubuntu-latest'
      container:
        image: devxci/mbtci
        options: -u 0
      steps:
      
      # get binary from cache
      - task: Cache@2
        inputs:
          key: piper-go-official
          path: bin
        displayName: resolve piper go binary from cache
      # build mta
      - script: |
          bin/piper version
          bin/piper mtaBuild
        displayName: 'Perform mta build'  
      # publish artifact 
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: $(System.DefaultWorkingDirectory)/BAS_Sample_App.mtar
          artifactName: mtar
        displayName: 'Publish mtar'

  # deploy artifact to DEV stage
  - stage: DeployToDev   
    jobs:
    - job: downloadPiper2
      dependsOn: piperMta
      pool:
        vmImage: 'ubuntu-latest'
      container:
        image: devxci/mbtci
        options: -u 0
      steps:        
        - task: DownloadPipelineArtifact@2
        # refer to artifact built previously
          inputs:
            artifact: mtar
        # get piper bin from cache
        - task: Cache@2
          inputs:
            key: piper-go-official
            path: bin
          displayName: resolve piper go binary from cache
      
    - job: piperCfDeploytoDev
      dependsOn: downloadPiper2
      pool:
        vmImage: 'ubuntu-latest'
      container:
        image: ppiper/cf-cli
        options: -u 0
      steps:
      - checkout: none
      
      # deploy using cf deploy
      - script: |
          bin/piper version
          mv $(Pipeline.Workspace)/BAS_Sample_App.mtar .
          bin/piper cloudFoundryDeploy --org $(org) --space $(space) --username '$(USER)' --password '$(PASSWD)' --apiEndpoint $(DEPLOY_URI) --mtaPath BAS_Sample_App.mtar --deployTool mtaDeployPlugin
        displayName: 'Perform cf deploy'

  # # deploy artifact to prod
  # - stage: DeployToProd
  #   dependsOn: DeployToDev
    # # jobs:
    # - job: downloadartifact
    #   steps:
    #   - task: DownloadPipelineArtifact@2
    #     inputs:
    #       artifact: mtar

    # - job: piperCfDeploytoProd      
    #   pool:
    #     vmImage: 'ubuntu-latest'
    #   container:
    #     image: ppiper/cf-cli
    #     options: -u 0
    #   steps:
    #   - checkout: none
     
    #   # get piper bin from cache
    #   - task: Cache@2
    #     inputs:
    #       key: piper-go-official
    #       path: bin
    #     displayName: resolve piper go binary from cache
    #   # deploy using cf deploy
    # - job: 
    #   steps:
    #   - script: |
    #       bin/piper version
    #       mv $(Pipeline.Workspace)/BAS_Sample_App.mtar .
    #       bin/piper cloudFoundryDeploy --org $(org) --space $(prodspace)--username '$(USER)' --password '$(PASSWD)' --apiEndpoint $(DEPLOY_URI) --mtaPath BAS_Sample_App.mtar --deployTool mtaDeployPlugin
    #     displayName: 'Perform cf deploy'